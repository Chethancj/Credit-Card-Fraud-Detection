# fraud_train.py
# Usage:
# 1) put creditcard.csv in data/
# 2) python fraud_train.py
# Output: prints evaluation and saves model 'fraud_model.pkl'

import pandas as pd
import numpy as np
import pickle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, precision_recall_curve, average_precision_score, roc_auc_score
from imblearn.over_sampling import SMOTE

def load_data(path="data/creditcard.csv"):
    df = pd.read_csv(path)
    return df

def main():
    df = load_data()
    # Typical Kaggle credit card dataset: 'Class' is 0 (legit) or 1 (fraud)
    X = df.drop('Class', axis=1)
    y = df['Class']
    # Scale Time and Amount (others are PCA already in that dataset)
    scaler = StandardScaler()
    if 'Amount' in X.columns:
        X['Amount_scaled'] = scaler.fit_transform(X[['Amount']])
        X = X.drop('Amount', axis=1)
    if 'Time' in X.columns:
        X['Time_scaled'] = scaler.fit_transform(X[['Time']])
        X = X.drop('Time', axis=1)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

    print("Before SMOTE:", y_train.value_counts())
    sm = SMOTE(random_state=42)
    X_res, y_res = sm.fit_resample(X_train, y_train)
    print("After SMOTE:", pd.Series(y_res).value_counts())

    clf = RandomForestClassifier(n_estimators=200, random_state=42, n_jobs=-1)
    clf.fit(X_res, y_res)

    y_pred = clf.predict(X_test)
    y_proba = clf.predict_proba(X_test)[:,1]

    print("Classification report:")
    print(classification_report(y_test, y_pred, digits=4))
    print("ROC-AUC:", roc_auc_score(y_test, y_proba))
    print("Average Precision (PR AUC):", average_precision_score(y_test, y_proba))

    # Save model
    with open('fraud_model.pkl', 'wb') as f:
        pickle.dump(clf, f)
    print("Saved fraud_model.pkl")

if __name__ == "__main__":
    main()

